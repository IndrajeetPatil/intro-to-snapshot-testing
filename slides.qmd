---
title: "Introduction to snapshot testing in R"
format:
  revealjs: 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for the slides can be found [here](https://github.com/IndrajeetPatil/intro-to-snapshot-testing)."
author: "Indrajeet Patil"
execute:
  echo: true
---

## Who is this for?

If you develop R packages and have wondered to yourself about how to 

::: incremental

- test that fancy printing prints as expected
- test that generated plots or images are as expected
- test that an entire file is as expected
- write maintainable tests when the output is too complex to include in the source code
- update such tests *en masse* 
- ...

::: 

<!-- ::: footer -->
<!-- Photo by Roman Mager on [Unsplash](https://unsplash.com/photos/5mZ_M06Fc9g) -->
<!-- ::: -->


# Testing print outputs

We will explore the ease with which snapshot tests can be used to check that printing methods work as expected.

Such custom methods are implemented to pretty-print R objects, to create visually pleasing warning/error messages, etc.

## Example function {.smaller}

Let's say we want to write a unit test for the following printing function in our R package:

::: panel-tabset

### Source code

```{r}
print_movies <- function(keys, values) {
  paste0(
    "Movie: \n",
    paste0("  ", keys, ": ", values, collapse = "\n")
  )
}
```

### Output

```{r}
cat(print_movies(
  c("Title", "Director"),
  c("Salaam Bombay!", "Mira Nair")
))
```

:::

Note that what we want to test here is whether the printed output *looks* as expected. Therefore, we need to check for all the little bells and whistles in the printed output.

## Example test {.smaller}

Even testing this simple function is a bit painful because we need to keep track of every escape character, every space, etc. 

```{r}
library(testthat)

test_that("`print_movies()` prints as expected", {
  expect_equal(
    print_movies(
      c("Title", "Director"),
      c("Salaam Bombay!", "Mira Nair")
    ),
    "Movie: \n  Title: Salaam Bombay!\n  Director: Mira Nair"
  )
})
```

With a more complex method, it'd be impossible for a human to read expected output.

:::{.callout-important}

If this is a utility function used by many other functions, changing its behaviour would entail *manually changing* expected outputs for many tests.
This is not maintainable! ðŸ˜©

:::

## Alternative: Snapshot test {.smaller}

Instead, you can use `expect_snapshot()`!

:::{.callout-note}
You will need to use the [third edition](https://testthat.r-lib.org/articles/third-edition.html) of `{testthat}` package.
:::

The *first time* you run the test, it would generate a (human-readable) Markdown file with expected output.

```{r include = FALSE}
snapper <- local_snapshotter()
snapper$start_file("slides.qmd", "test")
```

```{r}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

```{r, include = FALSE}
# Reset snapshot test
snapper$end_file()
snapper$start_file("slides.qmd", "test")
```

## What success looks like {.smaller}

:::{.callout-warning}

Because the expected output is generated the first time you run snapshot test, it is crucial that you carefully check that the output is indeed as expected. ðŸ”Ž 

:::

If you run the test again, it'll succeed:

```{r}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

```{r, include = FALSE}
# Reset snapshot test
snapper$end_file()
snapper$start_file("slides.qmd", "test")
```

## What failure looks like {.smaller}

But if we change the behavior of underlying function, the actual snapshot output won't match the expected output, and the test will fail:

::: panel-tabset

### New function

```{r}
print_movies <- function(keys, values) {
  paste0(
    "Movie: \n",
    paste0("  ", keys, "- ", values, collapse = "\n")
  )
}
```

### Test failure

```{r, error=TRUE}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

:::

## Fixing tests {.smaller}

If we look at the failed snapshot test message, it is quite explicit about our options to proceed.

::: incremental

- If the change was deliberate, you can accept the new snapshot as the current *truth*.

```r
* Run `snapshot_accept('slides.qmd')` to accept the change
```

- If this was unexpected, you can review the changes, and decide whether to change the snapshot or to correct the function behaviour instead.

```r
* Run `snapshot_review('slides.qmd')` to interactively review the change
```

:::

# Self-study 

In this presentation, we deliberately kept the example and the tests simple. 

To see a more realistic usage of snapshot tests, you should study some open-source test suits on your own. 

---

## Suggested repositories {.smaller}

::: columns

::: {.column width="33%"}
### Print outputs

- [`{cli}`](https://github.com/r-lib/cli/tree/main/tests/testthat) (for testing command line interfaces)

- [`{pkgdown}`](https://github.com/r-lib/pkgdown/tree/main/tests/testthat) (for testing generated HTML documents)

- [`{dbplyr}`](https://github.com/tidyverse/dbplyr/tree/main/tests/testthat) (for testing printing of generated SQL queries)

- [`{gt}`](https://github.com/rstudio/gt/tree/master/tests/testthat) (for testing table printing)
:::

::: {.column width="33%"}
### Visualizations

- [`{ggplot2}`](https://github.com/tidyverse/ggplot2/tree/main/tests/testthat)

- [`{ggstatsplot}`](https://github.com/IndrajeetPatil/ggstatsplot/tree/main/tests/testthat)
:::

::: {.column width="33%"}
### Shiny apps 

- [`{shinytest2}`](https://github.com/rstudio/shinytest2/tree/main/tests/testthat)

- [`{designer}`](https://github.com/ashbaldry/designer/tree/dev/tests/testthat)

:::
:::
