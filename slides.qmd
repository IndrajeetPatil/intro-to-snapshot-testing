---
title: "Introduction to snapshot testing in R"
format:
  revealjs: 
    theme: simple
    slide-number: true
    preview-links: auto
    footer: "Source code for the slides can be found [here](https://github.com/IndrajeetPatil/intro-to-snapshot-testing)."
author: "Indrajeet Patil"
execute:
  echo: true
---

## Unit testing {.smaller}

The goal of a unit test is to capture the *expected* output of a function using *code* and making sure that *actual* output produced after any changes to the function matches this expected output.

. . .

This insures against unintentionally changing function behaviour, or re-introducing already fixed bugs.

## Need for snapshot tests {.smaller}

If you develop R packages and have wondered to yourself about how to 

::: incremental

- test that printing methods work as expected
- test that generated plots or images are as expected
- test that an entire file is as expected
- write maintainable tests when the output is too complex to include in the source code
- update such tests *en masse* 

::: 

. . .

*Snapshots tests* (aka *golden tests*) can make writing such tests easier and more maintainable.

# Prerequisites

You are familiar with unit tests and how to write them using [`{testthat}`](https://testthat.r-lib.org/index.html).

If not, have a look at [this](https://r-pkgs.org/testing-basics.html) chapter from *R Packages* book.

## 

:::{.callout-important}

In the following slides, in all snapshot tests, I include the following line of code:

```r
local_edition(3)
```

**You don't need to do this in your package tests!**

Instead, you can use snapshot tests by activating the 3rd edition of `{testthat}`:

```r
Config/testthat/edition: 3
```

For more, see [this](https://testthat.r-lib.org/articles/third-edition.html) article.

:::

# Testing print outputs

Snapshot tests can be used to check that printing methods work as expected.

Such custom methods are implemented to pretty-print R objects to the console, to create visually pleasing warning/error messages, etc.

## Example function {.smaller}

Let's say we want to write a unit test for the following function in our R package:

::: panel-tabset

### Source code

```{r}
print_movies <- function(keys, values) {
  paste0(
    "Movie: \n",
    paste0("  ", keys, ": ", values, collapse = "\n")
  )
}
```

### Output

```{r}
cat(print_movies(
  c("Title", "Director"),
  c("Salaam Bombay!", "Mira Nair")
))
```

:::

. . .

Note that we want to test that the printed output *looks* as expected. 

Therefore, we need to check for all the little bells and whistles in the printed output.

## Example test {.smaller}

Even testing this simple function is a bit painful because we need to keep track of every escape character, every space, etc. 

```{r}
library(testthat)

test_that("`print_movies()` prints as expected", {
  expect_equal(
    print_movies(
      c("Title", "Director"),
      c("Salaam Bombay!", "Mira Nair")
    ),
    "Movie: \n  Title: Salaam Bombay!\n  Director: Mira Nair"
  )
})
```

With a more complex method, it'd be impossible for a human to read the expected output.

. . .

:::{.callout-important}

If this is a utility function used by many other functions, changing its behaviour would entail *manually* changing expected outputs for many tests.
This is not maintainable! 😩

:::

## Alternative: Snapshot test {.smaller}

Instead, you can use `expect_snapshot()`!

. . .

The *first time* you run the test, it would generate a (human-readable) Markdown file with expected output.

```{r include = FALSE}
snapper <- local_snapshotter()
snapper$start_file("slides.qmd", "test")
```

```{r}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

```{r, include = FALSE}
# Reset snapshot test
snapper$end_file()
snapper$start_file("slides.qmd", "test")
```

. . .

:::{.callout-warning}

Because the expected output is generated the first time you run snapshot test, it is crucial that you carefully check that the output is indeed as expected. 🔎 

:::

## What success looks like {.smaller}

If you run the test again, it'll succeed:

```{r}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

```{r, include = FALSE}
# Reset snapshot test
snapper$end_file()
snapper$start_file("slides.qmd", "test")
```

. . .

:::{.callout-note}

### Why does my test not pass?

If you just generated a snapshot and ran the test again and it failed, this is most likely because your test is not deterministic. For example, if your function deals with random number generation.

In such cases, setting a seed (e.g. `set.seed(42)`) should help.

:::

## What failure looks like {.smaller}

But if we change the behavior of underlying function (use `-` instead of `:` as a separator), the actual snapshot output won't match the expected one, and the test will fail:

::: panel-tabset

### New function

```{.r code-line-numbers="4"}
print_movies <- function(keys, values) {
  paste0(
    "Movie: \n",
    paste0("  ", keys, "- ", values, collapse = "\n")
  )
}
```

```{r}
#| echo: false

print_movies <- function(keys, values) {
  paste0(
    "Movie: \n",
    paste0("  ", keys, "- ", values, collapse = "\n")
  )
}
```

### Test failure

```{r, error=TRUE}
test_that("`print_movies()` prints as expected", {
  local_edition(3)
  expect_snapshot(cat(print_movies(
    c("Title", "Director"),
    c("Salaam Bombay!", "Mira Nair")
  )))
})
```

:::

. . . 

Note that when the test fails, the message automatically provides a diff about what was expected (`-` rows), and what was observed (`+` rows).

```r
- "    Title: Salaam Bombay!"
+ "    Title- Salaam Bombay!"
- "    Director: Mira Nair"
+ "    Director- Mira Nair"
```

## Fixing tests {.smaller}

Failed test message makes it explicit how we should proceed to fix failing tests.

- If the change was *deliberate*, you can accept the new snapshot as the current *truth*.

```r
* Run `snapshot_accept('slides.qmd')` to accept the change
```

- If this was *unexpected*, you can review the changes, and decide whether to change the snapshot or to correct the function behaviour instead.

```r
* Run `snapshot_review('slides.qmd')` to interactively review the change
```

:::{.callout-tip collapse="true"}
## Fixing multiple snapshot tests

If this is a utility function used by many other functions, changing its behaviour would lead to failure of many snapshot tests. You can accept snapshots for *all* files with `snapshot_accept()`.
:::

## Capturing messages and warnings {.smaller}

So far we have tested text output printed to the console, but we can also use snapshots to capture messages, warnings, and errors.

:::panel-tabset

### message

```{r}
f <- function() message("Some info for you.")
test_that("f() produces expected message", {
  local_edition(3)
  expect_snapshot(f())
})
```

### warnings

```{r}
g <- function() warning("Managed to recover.")
test_that("g() warns the user", {
  local_edition(3)
  expect_snapshot(g())
})
```

:::

Note that the snapshot logs both the exact *condition* and the corresponding *message*.
We can now rest assured that the users are getting informed the way we want them to.

## Capturing errors {.smaller}

In case of an error, the function `expect_snapshot()` itself will produce an error. So you have two ways to capture errors:

:::panel-tabset

### Option-1

```{r}
test_that("`log()` doesn't work when argument not numeric", {
  local_edition(3)
  expect_snapshot(log("x"), error = TRUE)
})
```

### Option-2

```{r}
test_that("`log()` doesn't work when argument not numeric", {
  local_edition(3)
  expect_snapshot_error(log("x"))
})
```

:::

:::{.callout-tip}

### Which option should I use?

- If you want to capture both the code and the error message, use `expect_snapshot(..., error = TRUE)`.

- If you want to capture only the error message, use `expect_snapshot_error()`.

:::

# Testing visual outputs

To create expectations, we will use `{testthat}` extension package: [`{vdiffr}`](https://vdiffr.r-lib.org/).

##

:::{.callout-tip}
## Why are my snapshots for plots failing?! 😔

Often, you will experience that your tests are failing even if you didn't change anything about your plotting function. 

Here are a few common reasons for such failures:

- R's graphics engine changed
- `{ggplot2}` itself changed
- non-determinism 
- reliance on system libraries

For these reasons, the visual regression tests tend to be fragile and by default not run on CRAN machines. They are only run on CI platforms.

:::

# Self-study 

In this presentation, we deliberately kept the example and the tests simple. 

To see a more realistic usage of snapshot tests, you should study some open-source test suits on your own. 

---

## Suggested repositories {.smaller}

::: columns

::: {.column width="33%"}
### Print outputs

- [`{cli}`](https://github.com/r-lib/cli/tree/main/tests/testthat) (for testing command line interfaces)

- [`{pkgdown}`](https://github.com/r-lib/pkgdown/tree/main/tests/testthat) (for testing generated HTML documents)

- [`{dbplyr}`](https://github.com/tidyverse/dbplyr/tree/main/tests/testthat) (for testing printing of generated SQL queries)

- [`{gt}`](https://github.com/rstudio/gt/tree/master/tests/testthat) (for testing table printing)
:::

::: {.column width="33%"}
### Visualizations

- [`{ggplot2}`](https://github.com/tidyverse/ggplot2/tree/main/tests/testthat)

- [`{ggstatsplot}`](https://github.com/IndrajeetPatil/ggstatsplot/tree/main/tests/testthat)
:::

::: {.column width="33%"}
### Shiny apps 

- [`{shinytest2}`](https://github.com/rstudio/shinytest2/tree/main/tests/testthat)

- [`{designer}`](https://github.com/ashbaldry/designer/tree/dev/tests/testthat)

:::
:::

## Further reading

- `{testthat}` article on [snapshot testing](https://testthat.r-lib.org/articles/snapshotting.html)

- `{shinytest2}` article introducing its [workflow](https://rstudio.github.io/shinytest2/articles/shinytest2.html)

- [Introduction to golden testing](https://ro-che.info/articles/2017-12-04-golden-tests)

- Collection of for [unit testing](https://github.com/IndrajeetPatil/awesome-r-pkgtools/blob/main/README.md#unit-testing-) in R

# Find me at...

[🐦 Twitter](http://twitter.com/patilindrajeets)

[💻 GitHub](http://github.com/IndrajeetPatil)

[🔗 Website](https://sites.google.com/site/indrajeetspatilmorality/)

[📧 E-mail](mailto:patilindrajeet.science@gmail.com)

# Thank You! 😊
